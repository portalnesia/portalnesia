/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, {PureComponent} from 'react';
import {Alert, StyleSheet, Text, View, Pressable, ToastAndroid} from 'react-native';
import Portalnesia from '@portalnesia/react-native-core';

export default class App extends PureComponent {
  state = {
    abi: 'waiting',
    localization: 'waiting',
    brightness: 'waiting',
    uri: 'waiting',
    google: 'waiting',
    recaptcha: 'waiting',
    portalnesia: 'waiting',
  };
  async init() {
    // ABI
    this.setState({abi: Portalnesia.Core.SUPPORTED_ABIS.join(', ')});
    // LOCALIZATION
    const locales = Portalnesia.Core.initialLocalization.locales;
    const country = Portalnesia.Core.initialLocalization.country;
    const localization = locales.map((dt) => {
      return JSON.stringify(dt);
    });
    this.setState({
      localization: `country: ${country}; locales: ${localization.join(', ')}`,
    });
    //IS APK INSTALLED
    try {
      const portalnesia = await Portalnesia.Core.isAppInstalled(
        'com.portalnesia.app',
      );
      this.setState({portalnesia});
    } catch (e) {
      this.setState({portalnesia: `Error: ${e?.message}`});
    }
    // BRIGHTNESS
    try {
      const brightness = await Portalnesia.Brightness.getSystemBrightness();
      this.setState({brightness});
    } catch (e) {
      this.setState({brightness: `Error: ${e?.message}`});
    }
    // URI
    try {
      const uri = await Portalnesia.Files.getUriPermission();
      this.setState({uri: uri?.length > 0 ? result.join(',') : '-'});
    } catch (e) {
      this.setState({uri: `Error: ${e?.message}`});
    }
    // GOOGLE
    try {
      const google =
        await Portalnesia.Safetynet.isGooglePlayServicesAvailable();
      this.setState({google});
    } catch (e) {
      this.setState({google: `Error: ${e?.message}`});
    }
  }
  async handleRecaptcha() {
    try {
      const recaptcha = await Portalnesia.Safetynet.verifyWithRecaptcha();
      this.setState({recaptcha});
    } catch (e) {
      this.setState({recaptcha: `Error: ${e?.message}`});
    }
  }
  handleExitApp() {
    try {
      Portalnesia.Core.exitApp();
    } catch(e) {
      console.log(e);
    }
  }
  async handleDownloadManager() {
    try {
      const uri = "https://github.com/portalnesia/portalnesia-native/releases/download/v2.13.0/Portalnesia-arm64-v8a-v2.13.0.apk";
      const title = "Portalnesia-arm64-v8a-v2.13.0.apk";
      const desc = "Downloading...";
      const id = await Portalnesia.Files.download({
        title,
        description:desc,
        mimeType:"application/vnd.android.package-archive",
        uri,
        destination:{
          type:Portalnesia.Files.DIRECTORY_DOWNLOADS,
          path:title
        },
        channel_id:"default_notification_channel"
      });
      console.log("Download ID" ,id);
    } catch (e) {
      Alert.alert('Error', e.message, [{text: 'OK', onPress: () => {}}]);
    }
  }
  async handleNotification() {
    try {
      await Portalnesia.Notification.notify(1, 'default_notification_channel', {
        title: 'Tes',
        body: 'Tes body notification',
        autoCancel: true,
        messages:{
          title:"Portalnesia",
          label:"Reply",
          extra:{
            token:"example_token",
            sender:"putuaditya_sid",
          },
          message:[
            {sender:"putuaditya_sid",time:new Date("10/10/2021 10:10:10").getTime(),text:"Hai...",image:"https://content.portalnesia.com/img/content?watermark=no&image=images%2F2021%2F6162040187bbd_28ffbb25-99e0-4de5-bc93-7d31744e2083jpg.jpg"},
            {sender:"Portalnesia",time:new Date("10/10/2021 15:10:10").getTime(),text:"Iya halo..."},
            {sender:"putuaditya_sid",time:new Date().getTime(),text:"Siapa dimana?",image:"https://content.portalnesia.com/img/content?watermark=no&image=images%2F2021%2F6162040187bbd_28ffbb25-99e0-4de5-bc93-7d31744e2083jpg.jpg"}
          ]
        },
        priority:Portalnesia.Notification.PRIORITY_HIGH,
        action:[
          {
            label:"Mark as read",
            key:"mark_as_read",
            extra:{
              token:"example_token",
              sender:"Portalnesia"
            }
          }
        ]
      });
    } catch (e) {
      console.log(e);
      //Alert.alert('Error', e.message, [{text: 'OK', onPress: () => {}}]);
    }
  }
  async handleIsActiveNotification() {
    const active = await Portalnesia.Notification.isNotificationActive(1);
    ToastAndroid.show(`Notification is ${active ? "active" : "not active"}`,ToastAndroid.LONG);
  }
  componentDidMount() {
    this.init();
  }
  
  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.welcome}>☆Portalnesia Example☆</Text>
        <Text style={[styles.welcome, {fontSize: 17}]}>☆NATIVE METHOD☆</Text>

        <View style={{marginTop: 20, paddingHorizontal: 20}}>
          <Text style={styles.instructions}>{`ABI: ${this.state.abi}`}</Text>
          <Text
            style={
              styles.instructions
            }>{`Localization: ${this.state.localization}`}</Text>
          <Text
            style={
              styles.instructions
            }>{`Portalnesia Installed: ${this.state.portalnesia}`}</Text>
          <Text
            style={
              styles.instructions
            }>{`Brightness: ${this.state.brightness}`}</Text>
          <Text
            style={
              styles.instructions
            }>{`Uri Permission: ${this.state.uri}`}</Text>
          <Text
            style={
              styles.instructions
            }>{`Google Services Avaibility: ${this.state.google}`}</Text>
          <Text
            style={
              styles.instructions
            }>{`Recaptcha: ${this.state.recaptcha}`}</Text>
        </View>

        <View style={{marginTop: 20}}>
          <Pressable
            style={styles.button}
            android_ripple={{color: 'rgba(0,0,0,0.12', borderless: false}}
            onPress={() => this.handleRecaptcha()}>
            <Text style={styles.button_text}>Check recaptcha</Text>
          </Pressable>
          <Pressable
            style={styles.button}
            android_ripple={{color: 'rgba(0,0,0,0.12', borderless: false}}
            onPress={() => this.handleDownloadManager()}>
            <Text style={styles.button_text}>Download APK</Text>
          </Pressable>
          <Pressable
            style={styles.button}
            android_ripple={{color: 'rgba(0,0,0,0.12', borderless: false}}
            onPress={() => this.handleNotification()}>
            <Text style={styles.button_text}>Notify</Text>
          </Pressable>
          <Pressable
            style={styles.button}
            android_ripple={{color: 'rgba(0,0,0,0.12', borderless: false}}
            onPress={() => this.handleIsActiveNotification()}>
            <Text style={styles.button_text}>Check Notification</Text>
          </Pressable>
          <Pressable
            style={styles.button}
            android_ripple={{color: 'rgba(0,0,0,0.12', borderless: false}}
            onPress={() => this.handleExitApp()}>
            <Text style={styles.button_text}>Exit App</Text>
          </Pressable>
          <Pressable
            style={styles.button}
            android_ripple={{color: 'rgba(0,0,0,0.12', borderless: false}}
            onPress={() => this.init()}>
            <Text style={styles.button_text}>Refresh</Text>
          </Pressable>
        </View>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 5,
  },
  instructions: {
    textAlign: 'left',
    color: '#333333',
    marginVertical: 3,
  },
  button_text: {
    textAlign: 'center',
    color: '#333333',
  },
  button: {
    margin: 5,
    padding: 10,
    backgroundColor: 'rgba(0,0,0,0.1)',
    borderRadius: 7,
  },
});
